"""
Handlers for judge actions
"""
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest
import logging

from database.db import Database
from database.models import (
    User, TICKET_TYPES, TICKET_STATUSES,
    TICKET_STATUS_OPEN, TICKET_STATUS_IN_PROGRESS,
    TICKET_STATUS_CLOSED
)
from keyboards.reply import (
    get_judge_tickets_keyboard,
    get_judge_ticket_list_keyboard,
    get_judge_ticket_actions_keyboard,
    get_cancel_keyboard,
    get_back_to_menu_keyboard
)
from states.forms import CommentForm
from config import MAX_COMMENT_LENGTH

logger = logging.getLogger(__name__)

router = Router()


@router.callback_query(F.data == "judge_tickets")
async def judge_tickets_menu(callback: CallbackQuery):
    """Show judge tickets menu"""
    await callback.message.edit_text(
        "üë®‚Äç‚öñÔ∏è –ü–∞–Ω–µ–ª—å —Å—É–¥—å–∏\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–æ–∫:",
        reply_markup=get_judge_tickets_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data.startswith("judge_filter:"))
async def judge_filter_tickets(callback: CallbackQuery, user: User, db: Database):
    """Filter tickets for judges"""
    filter_type = callback.data.split(":")[1]
    
    # Get tickets based on filter
    if filter_type == "open":
        tickets = await db.get_all_tickets(TICKET_STATUS_OPEN)
        filter_name = "–û—Ç–∫—Ä—ã—Ç—ã–µ"
    elif filter_type == "in_progress":
        tickets = await db.get_all_tickets(TICKET_STATUS_IN_PROGRESS)
        filter_name = "–í —Ä–∞–±–æ—Ç–µ"
    elif filter_type == "my_tickets":
        tickets = await db.get_judge_tickets(user.id, TICKET_STATUS_IN_PROGRESS)
        filter_name = "–ú–æ–∏ –≤ —Ä–∞–±–æ—Ç–µ"
    else:  # all
        tickets = await db.get_all_tickets()
        filter_name = "–í—Å–µ"
    
    if not tickets:
        try:
            await callback.message.edit_text(
                f"üìã {filter_name} –∑–∞—è–≤–∫–∏\n\n"
                "–ù–µ—Ç –∑–∞—è–≤–æ–∫ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.",
                reply_markup=get_judge_tickets_keyboard()
            )
        except TelegramBadRequest as e:
            if "message is not modified" in str(e):
                await callback.answer("–°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è")
            else:
                raise
    else:
        try:
            await callback.message.edit_text(
                f"üìã {filter_name} –∑–∞—è–≤–∫–∏ ({len(tickets)}):\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
                reply_markup=get_judge_ticket_list_keyboard(tickets, filter_type, page=0)
            )
        except TelegramBadRequest as e:
            if "message is not modified" in str(e):
                await callback.answer("–°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è")
            else:
                raise
    
    await callback.answer()


@router.callback_query(F.data.startswith("judge_page:"))
async def judge_tickets_pagination(callback: CallbackQuery, user: User, db: Database):
    """Handle pagination for judge tickets"""
    parts = callback.data.split(":")
    filter_type = parts[1]
    page = int(parts[2])
    
    # Get tickets based on filter
    if filter_type == "open":
        tickets = await db.get_all_tickets(TICKET_STATUS_OPEN)
        filter_name = "–û—Ç–∫—Ä—ã—Ç—ã–µ"
    elif filter_type == "in_progress":
        tickets = await db.get_all_tickets(TICKET_STATUS_IN_PROGRESS)
        filter_name = "–í —Ä–∞–±–æ—Ç–µ"
    elif filter_type == "my_tickets":
        tickets = await db.get_judge_tickets(user.id, TICKET_STATUS_IN_PROGRESS)
        filter_name = "–ú–æ–∏ –≤ —Ä–∞–±–æ—Ç–µ"
    else:  # all
        tickets = await db.get_all_tickets()
        filter_name = "–í—Å–µ"
    
    try:
        await callback.message.edit_text(
            f"üìã {filter_name} –∑–∞—è–≤–∫–∏ ({len(tickets)}):\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
            reply_markup=get_judge_ticket_list_keyboard(tickets, filter_type, page=page)
        )
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await callback.answer("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å")
        else:
            raise
    
    await callback.answer()


@router.callback_query(F.data.startswith("judge_view_ticket:"))
async def judge_view_ticket(callback: CallbackQuery, db: Database):
    """View ticket details as judge"""
    ticket_id = int(callback.data.split(":")[1])
    
    ticket = await db.get_ticket(ticket_id)
    
    if not ticket:
        await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    # Get ticket owner
    owner = await db.get_user(ticket.user_id)
    owner_name = owner.first_name if owner else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
    owner_username = f"@{owner.username}" if owner and owner.username else "–Ω–µ—Ç username"
    
    # Get assigned judge
    judge_info = ""
    if ticket.judge_id:
        assigned_judge = await db.get_user(ticket.judge_id)
        if assigned_judge:
            judge_info = f"üë®‚Äç‚öñÔ∏è –°—É–¥—å—è: {assigned_judge.first_name}\n"
    
    # Get comments
    comments = await db.get_ticket_comments(ticket_id)
    
    type_name = TICKET_TYPES.get(ticket.ticket_type, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    status_name = TICKET_STATUSES.get(ticket.status, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    
    text = (
        f"üìã –ó–∞—è–≤–∫–∞ #{ticket.id}\n\n"
        f"üë§ –ò–≥—Ä–æ–∫: {owner_name} ({owner_username})\n"
        f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {owner_username}\n"
        f"{judge_info}\n"
        f"üìå –¢–∏–ø: {type_name}\n"
        f"üìä –°—Ç–∞—Ç—É—Å: {status_name}\n"
        f"üìÖ –°–æ–∑–¥–∞–Ω–∞: {ticket.created_at}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ:\n{ticket.description}\n"
    )
    
    if comments:
        text += f"\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ ({len(comments)}):\n"
        for comment in comments:
            judge = await db.get_user(comment.judge_id)
            judge_name = judge.first_name if judge else "–°—É–¥—å—è"
            text += f"\n‚Ä¢ {judge_name}: {comment.text}\n  ({comment.created_at})"
    
    if ticket.closed_at:
        closer = await db.get_user(ticket.closed_by) if ticket.closed_by else None
        closer_name = closer.first_name if closer else "–°–∏—Å—Ç–µ–º–∞"
        text += f"\n\nüîí –ó–∞–∫—Ä—ã—Ç–∞: {ticket.closed_at}\n   –ö–µ–º: {closer_name}"
    
    try:
        await callback.message.edit_text(
            text,
            reply_markup=get_judge_ticket_actions_keyboard(ticket)
        )
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å")
        else:
            raise
    await callback.answer()


@router.callback_query(F.data.startswith("take_ticket:"))
async def take_ticket(callback: CallbackQuery, user: User, db: Database):
    """Take ticket into work"""
    ticket_id = int(callback.data.split(":")[1])
    
    ticket = await db.get_ticket(ticket_id)
    
    if not ticket:
        await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    if ticket.status != TICKET_STATUS_OPEN:
        await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ —É–∂–µ –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É", show_alert=True)
        return
    
    # Update status and assign judge
    await db.update_ticket_status(ticket_id, TICKET_STATUS_IN_PROGRESS, judge_id=user.id)
    
    # Add automatic comment
    await db.create_comment(
        ticket_id,
        user.id,
        f"–ó–∞—è–≤–∫–∞ –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É —Å—É–¥—å–µ–π {user.first_name}"
    )
    
    # Notify ticket owner
    owner = await db.get_user(ticket.user_id)
    if owner:
        try:
            await callback.bot.send_message(
                owner.id,
                f"üü° –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{ticket_id} –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É —Å—É–¥—å–µ–π {user.first_name}"
            )
        except Exception as e:
            logger.error(f"Failed to notify ticket owner {owner.id}: {e}")
    
    await callback.answer("‚úÖ –ó–∞—è–≤–∫–∞ –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É")
    
    # Refresh ticket view
    await judge_view_ticket(callback, db)


@router.callback_query(F.data.startswith("add_comment:"))
async def start_add_comment(callback: CallbackQuery, state: FSMContext):
    """Start adding comment to ticket"""
    ticket_id = int(callback.data.split(":")[1])
    
    await state.update_data(comment_ticket_id=ticket_id)
    await state.set_state(CommentForm.entering_comment)
    
    await callback.message.edit_text(
        f"üí¨ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –∑–∞—è–≤–∫–µ #{ticket_id}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–º–∞–∫—Å–∏–º—É–º {MAX_COMMENT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤):",
        reply_markup=get_cancel_keyboard()
    )
    await callback.answer()


@router.message(CommentForm.entering_comment)
async def comment_entered(message: Message, user: User, db: Database, state: FSMContext):
    """Handle comment input"""
    comment_text = message.text.strip()
    
    # Validate comment length
    if len(comment_text) > MAX_COMMENT_LENGTH:
        await message.answer(
            f"‚ùå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π! –ú–∞–∫—Å–∏–º—É–º {MAX_COMMENT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤.\n"
            f"–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {len(comment_text)} —Å–∏–º–≤–æ–ª–æ–≤.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return
    
    if len(comment_text) < 3:
        await message.answer(
            "‚ùå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π! –ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞."
        )
        return
    
    # Get ticket ID from state
    data = await state.get_data()
    ticket_id = data.get("comment_ticket_id")
    
    # Create comment
    await db.create_comment(ticket_id, user.id, comment_text)
    
    await state.clear()
    
    # Notify ticket owner
    ticket = await db.get_ticket(ticket_id)
    if ticket:
        owner = await db.get_user(ticket.user_id)
        if owner:
            try:
                await message.bot.send_message(
                    owner.id,
                    f"üí¨ –ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –≤–∞—à–µ–π –∑–∞—è–≤–∫–µ #{ticket_id}\n\n"
                    f"–°—É–¥—å—è {user.first_name}: {comment_text}"
                )
            except Exception as e:
                logger.error(f"Failed to notify ticket owner {owner.id}: {e}")
    
    from keyboards.reply import get_judge_ticket_actions_keyboard
    
    await message.answer(
        f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω –∫ –∑–∞—è–≤–∫–µ #{ticket_id}",
        reply_markup=get_judge_ticket_actions_keyboard(ticket) if ticket else get_back_to_menu_keyboard()
    )


@router.callback_query(F.data == "cancel", CommentForm.entering_comment)
async def cancel_comment(callback: CallbackQuery, db: Database, state: FSMContext):
    """Cancel adding comment"""
    data = await state.get_data()
    ticket_id = data.get("comment_ticket_id")
    
    await state.clear()
    
    # Return to ticket view if we have ticket_id
    if ticket_id:
        ticket = await db.get_ticket(ticket_id)
        if ticket:
            from keyboards.reply import get_judge_ticket_actions_keyboard
            await callback.message.edit_text(
                "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                reply_markup=get_judge_ticket_actions_keyboard(ticket)
            )
            await callback.answer()
            return
    
    # Fallback to menu
    from keyboards.reply import get_back_to_menu_keyboard
    await callback.message.edit_text(
        "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=get_back_to_menu_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data.startswith("judge_close_ticket:"))
async def judge_close_ticket(callback: CallbackQuery, user: User, db: Database):
    """Close ticket as judge"""
    ticket_id = int(callback.data.split(":")[1])
    
    ticket = await db.get_ticket(ticket_id)
    
    if not ticket:
        await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    if ticket.status == TICKET_STATUS_CLOSED:
        await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞", show_alert=True)
        return
    
    # Close ticket
    await db.update_ticket_status(ticket_id, TICKET_STATUS_CLOSED, user.id)
    
    # Add automatic comment
    await db.create_comment(
        ticket_id,
        user.id,
        f"–ó–∞—è–≤–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞ —Å—É–¥—å–µ–π {user.first_name}"
    )
    
    # Notify ticket owner
    owner = await db.get_user(ticket.user_id)
    if owner:
        try:
            await callback.bot.send_message(
                owner.id,
                f"üîí –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{ticket_id} –∑–∞–∫—Ä—ã—Ç–∞ —Å—É–¥—å–µ–π {user.first_name}"
            )
        except Exception as e:
            logger.error(f"Failed to notify ticket owner {owner.id}: {e}")
    
    await callback.message.edit_text(
        f"‚úÖ –ó–∞—è–≤–∫–∞ #{ticket_id} –∑–∞–∫—Ä—ã—Ç–∞."
    )
    await callback.answer("‚úÖ –ó–∞—è–≤–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞")

