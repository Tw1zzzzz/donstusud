"""
Handlers for player actions
"""
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest
import logging

from database.db import Database
from database.models import User, TICKET_TYPES, TICKET_STATUSES, ROLE_JUDGE, ROLE_ADMIN
from keyboards.reply import (
    get_main_menu_keyboard,
    get_ticket_type_keyboard,
    get_confirm_ticket_keyboard,
    get_my_tickets_keyboard,
    get_ticket_detail_keyboard,
    get_back_to_menu_keyboard
)
from states.forms import TicketForm
from config import MAX_DESCRIPTION_LENGTH

logger = logging.getLogger(__name__)

router = Router()


@router.message(Command("start"))
async def cmd_start(message: Message, user: User, db: Database):
    """Handle /start command"""
    is_judge = user.role in [ROLE_JUDGE, ROLE_ADMIN]
    
    if is_judge:
        # For judges: show tickets menu directly
        from keyboards.reply import get_judge_tickets_keyboard
        
        welcome_text = f"üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Ç–µ–±—è –≤ —Å–∞–ø–ø–æ—Ä—Ç –±–æ—Ç–µ –í—Å–µ—Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞ –ø–æ —Ñ–∏–¥–∂–∏—Ç–∞–ª-—Å–ø–æ—Ä—Ç—É ¬´–§–∏–¥–∂–∏—Ç–∞–ª ‚Äî –≤—Å–µ–º¬ª\n\n"
        
        if user.role == ROLE_ADMIN:
            welcome_text += "üîë –í—ã - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±–æ—Ç–∞.\n"
        else:
            welcome_text += "üë®‚Äç‚öñÔ∏è –í—ã - —Å—É–¥—å—è —Ç—É—Ä–Ω–∏—Ä–∞.\n"
        
        welcome_text += "\nüìã –ü–∞–Ω–µ–ª—å —Å—É–¥—å–∏\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–æ–∫:"
        
        await message.answer(
            welcome_text,
            reply_markup=get_judge_tickets_keyboard()
        )
    else:
        # For players: show regular menu
        welcome_text = f"üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Ç–µ–±—è –≤ —Å–∞–ø–ø–æ—Ä—Ç –±–æ—Ç–µ –í—Å–µ—Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞ –ø–æ —Ñ–∏–¥–∂–∏—Ç–∞–ª-—Å–ø–æ—Ä—Ç—É ¬´–§–∏–¥–∂–∏—Ç–∞–ª ‚Äî –≤—Å–µ–º¬ª\n\n"
        welcome_text += "–í—ã –º–æ–∂–µ—Ç–µ:\nüìù –°–æ–∑–¥–∞—Ç—å –∂–∞–ª–æ–±—É\nüìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∑–∞—è–≤–∫–∏\n"
        
        await message.answer(
            welcome_text,
            reply_markup=get_main_menu_keyboard(is_judge=False)
        )


@router.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: CallbackQuery, user: User, state: FSMContext):
    """Return to main menu"""
    await state.clear()
    
    is_judge = user.role in [ROLE_JUDGE, ROLE_ADMIN]
    
    if is_judge:
        # For judges: return to tickets filter menu
        from keyboards.reply import get_judge_tickets_keyboard
        await callback.message.edit_text(
            "üë®‚Äç‚öñÔ∏è –ü–∞–Ω–µ–ª—å —Å—É–¥—å–∏\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–æ–∫:",
            reply_markup=get_judge_tickets_keyboard()
        )
    else:
        # For players: return to main menu
        await callback.message.edit_text(
            "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_menu_keyboard(is_judge=False)
        )
    
    await callback.answer()


@router.callback_query(F.data == "create_ticket")
async def create_ticket_start(callback: CallbackQuery, state: FSMContext):
    """Start ticket creation process"""
    await state.set_state(TicketForm.choosing_type)
    
    await callback.message.edit_text(
        "üìù –°–æ–∑–¥–∞–Ω–∏–µ –∂–∞–ª–æ–±—ã\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∂–∞–ª–æ–±—ã:",
        reply_markup=get_ticket_type_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data.startswith("ticket_type:"), TicketForm.choosing_type)
async def ticket_type_selected(callback: CallbackQuery, state: FSMContext):
    """Handle ticket type selection"""
    ticket_type = callback.data.split(":")[1]
    
    await state.update_data(ticket_type=ticket_type)
    await state.set_state(TicketForm.entering_description)
    
    type_name = TICKET_TYPES.get(ticket_type, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø")
    
    await callback.message.edit_text(
        f"üìù –¢–∏–ø –∂–∞–ª–æ–±—ã: {type_name}\n\n"
        f"–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É (–º–∞–∫—Å–∏–º—É–º {MAX_DESCRIPTION_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤):",
        reply_markup=get_back_to_menu_keyboard()
    )
    await callback.answer()


@router.message(TicketForm.entering_description)
async def ticket_description_entered(message: Message, state: FSMContext):
    """Handle ticket description input"""
    description = message.text.strip()
    
    # Validate description length
    if len(description) > MAX_DESCRIPTION_LENGTH:
        await message.answer(
            f"‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ! –ú–∞–∫—Å–∏–º—É–º {MAX_DESCRIPTION_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤.\n"
            f"–í–∞—à–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {len(description)} —Å–∏–º–≤–æ–ª–æ–≤.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return
    
    if len(description) < 10:
        await message.answer(
            "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ! –ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ."
        )
        return
    
    await state.update_data(description=description)
    await state.set_state(TicketForm.confirming)
    
    # Get stored data
    data = await state.get_data()
    ticket_type = data.get("ticket_type")
    type_name = TICKET_TYPES.get(ticket_type, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø")
    
    await message.answer(
        "‚úÖ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π:\n\n"
        f"üìå –¢–∏–ø: {type_name}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n"
        "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É?",
        reply_markup=get_confirm_ticket_keyboard()
    )


@router.callback_query(F.data == "confirm_ticket", TicketForm.confirming)
async def confirm_ticket(callback: CallbackQuery, user: User, db: Database, state: FSMContext):
    """Confirm and create ticket"""
    data = await state.get_data()
    ticket_type = data.get("ticket_type")
    description = data.get("description")
    
    # Create ticket
    ticket = await db.create_ticket(user.id, ticket_type, description)
    
    await state.clear()
    
    type_name = TICKET_TYPES.get(ticket_type, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø")
    
    await callback.message.edit_text(
        f"‚úÖ –ó–∞—è–≤–∫–∞ #{ticket.id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
        f"üìå –¢–∏–ø: {type_name}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n"
        "–°—É–¥—å—è —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
        reply_markup=get_back_to_menu_keyboard()
    )
    
    # Notify judges
    judges = await db.get_judges()
    for judge in judges:
        try:
            await callback.bot.send_message(
                judge.id,
                f"üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{ticket.id}\n\n"
                f"üë§ –û—Ç: {user.first_name} (@{user.username or '–Ω–µ—Ç username'})\n"
                f"üìå –¢–∏–ø: {type_name}\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}"
            )
        except Exception as e:
            logger.error(f"Failed to notify judge {judge.id}: {e}")
    
    await callback.answer("‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!")


@router.callback_query(F.data == "cancel_ticket")
async def cancel_ticket(callback: CallbackQuery, state: FSMContext):
    """Cancel ticket creation"""
    await state.clear()
    
    await callback.message.edit_text(
        "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=get_back_to_menu_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "my_tickets")
async def show_my_tickets(callback: CallbackQuery, user: User, db: Database):
    """Show user's tickets"""
    tickets = await db.get_user_tickets(user.id)
    
    try:
        if not tickets:
            await callback.message.edit_text(
                "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫.\n\n"
                "–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É, –µ—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞.",
                reply_markup=get_back_to_menu_keyboard()
            )
        else:
            await callback.message.edit_text(
                f"üìã –í–∞—à–∏ –∑–∞—è–≤–∫–∏ ({len(tickets)}):\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
                reply_markup=get_my_tickets_keyboard(tickets, page=0)
            )
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await callback.answer("–°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è")
            return
        else:
            raise
    
    await callback.answer()


@router.callback_query(F.data.startswith("my_tickets_page:"))
async def my_tickets_pagination(callback: CallbackQuery, user: User, db: Database):
    """Handle pagination for my tickets"""
    page = int(callback.data.split(":")[1])
    
    tickets = await db.get_user_tickets(user.id)
    
    try:
        await callback.message.edit_text(
            f"üìã –í–∞—à–∏ –∑–∞—è–≤–∫–∏ ({len(tickets)}):\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
            reply_markup=get_my_tickets_keyboard(tickets, page=page)
        )
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await callback.answer("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å")
            return
        else:
            raise
    
    await callback.answer()


@router.callback_query(F.data == "noop")
async def noop_callback(callback: CallbackQuery):
    """Handle noop callback (pagination indicator)"""
    await callback.answer()


@router.callback_query(F.data.startswith("view_my_ticket:"))
async def view_my_ticket(callback: CallbackQuery, user: User, db: Database):
    """View ticket details"""
    ticket_id = int(callback.data.split(":")[1])
    
    ticket = await db.get_ticket(ticket_id)
    
    if not ticket or ticket.user_id != user.id:
        await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    # Get comments
    comments = await db.get_ticket_comments(ticket_id)
    
    # Get assigned judge info
    judge_info = ""
    if ticket.judge_id:
        assigned_judge = await db.get_user(ticket.judge_id)
        if assigned_judge:
            judge_info = f"üë®‚Äç‚öñÔ∏è –°—É–¥—å—è: {assigned_judge.first_name}\n"
    
    type_name = TICKET_TYPES.get(ticket.ticket_type, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    status_name = TICKET_STATUSES.get(ticket.status, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    
    text = (
        f"üìã –ó–∞—è–≤–∫–∞ #{ticket.id}\n\n"
        f"üìå –¢–∏–ø: {type_name}\n"
        f"üìä –°—Ç–∞—Ç—É—Å: {status_name}\n"
        f"{judge_info}"
        f"üìÖ –°–æ–∑–¥–∞–Ω–∞: {ticket.created_at}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ:\n{ticket.description}\n"
    )
    
    if comments:
        text += f"\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å—É–¥–µ–π ({len(comments)}):\n"
        for comment in comments:
            judge = await db.get_user(comment.judge_id)
            judge_name = judge.first_name if judge else "–°—É–¥—å—è"
            text += f"\n‚Ä¢ {judge_name}: {comment.text}\n  ({comment.created_at})"
    
    if ticket.closed_at:
        text += f"\n\nüîí –ó–∞–∫—Ä—ã—Ç–∞: {ticket.closed_at}"
    
    try:
        await callback.message.edit_text(
            text,
            reply_markup=get_ticket_detail_keyboard(ticket, is_owner=True)
        )
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å")
            return
        else:
            raise
    await callback.answer()


@router.callback_query(F.data.startswith("close_ticket:"))
async def close_ticket(callback: CallbackQuery, user: User, db: Database):
    """Close ticket by owner"""
    ticket_id = int(callback.data.split(":")[1])
    
    ticket = await db.get_ticket(ticket_id)
    
    if not ticket or ticket.user_id != user.id:
        await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    if ticket.status == "closed":
        await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞", show_alert=True)
        return
    
    # Close ticket
    await db.update_ticket_status(ticket_id, "closed", user.id)
    
    await callback.message.edit_text(
        f"‚úÖ –ó–∞—è–≤–∫–∞ #{ticket_id} –∑–∞–∫—Ä—ã—Ç–∞.",
        reply_markup=get_back_to_menu_keyboard()
    )
    
    # Notify judges
    judges = await db.get_judges()
    for judge in judges:
        try:
            await callback.bot.send_message(
                judge.id,
                f"üîí –ó–∞—è–≤–∫–∞ #{ticket_id} –∑–∞–∫—Ä—ã—Ç–∞ –∏–≥—Ä–æ–∫–æ–º {user.first_name}"
            )
        except Exception as e:
            logger.error(f"Failed to notify judge {judge.id}: {e}")
    
    await callback.answer("‚úÖ –ó–∞—è–≤–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞")

